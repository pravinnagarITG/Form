
       <h2>JavaScript Object Properties</h2>
       <script>
        const person = {
        firstName: "John",
        lastName: "Doe",
        age: 50
        };

    //  objectName.property
       let age1 = person.age;
    //  objectName["property"]
       let age2 = person["age"];

        //Examples
        person.firstname + " is " + person.age + " years old.";
        person["firstname"] + " is " + person["age"] + " years old.";

    //  Adding New Properties
      person.nationality = "English";

    //   Deleting Properties
        const person = {
        firstName: "John",
        lastName: "Doe",
        age: 50,
        eyeColor: "blue"
        };

        delete person.age;
        delete person["age"];        
       </script>

       <h2>JavaScript Object Methods</h2>

       <script>

        const person = {
        firstName: "John",
        lastName: "Doe",
        id: 5566,
        fullName: function() {
            return this.firstName + " " + this.lastName;
        }
        };
        // In the example above, this refers to the person object:
        // this.firstName means the firstName property of person.
        // this.lastName means the lastName property of person.

        // Accessing Object Methods
        name = person.fullName();

        // Adding a Method to an Object
        person.name = function () {
        return this.firstName + " " + this.lastName;
        };
        
       </script>
       
       <h2>JavaScript Display Objects</h2>
       <div id="demo"></div>
       <script>
        // Create an Object
           const person = {
            name: "John",
            age: 30,
            city: "New York"
            };

        document.getElementById("demo").innerHTML = person;

        // Some solutions to display JavaScript objects are:
        // Displaying the Object Properties by name
        // Displaying the Object Properties in a Loop
        // Displaying the Object using Object.values()
        // Displaying the Object using JSON.stringify()

        const person = {
        name: "John",
        age: 30,
        city: "New York"
        };

        // Display Properties *****************
        document.getElementById("demo").innerHTML =
        person.name + "," + person.age + "," + person.city;

        // Displaying Properties in a Loop *****************

        const person = {
        name: "John",
        age: 30,
        city: "New York"
        };

        // Build a Text
        let text = "";
        for (let x in person) {
        text += person[x] + " ";
        };

        // Display the Text
        document.getElementById("demo").innerHTML = text;

        // Using Object.values() *****************

        const person = {
        name: "John",
        age: 30,
        city: "New York"
        };

        // Create an Array
        const myArray = Object.values(person);

        // Display the Array
        document.getElementById("demo").innerHTML = myArray;
 
        // Using Object.entries() ************************

        const fruits = {
            Bananas:300,
            Oranges:200,            
            Apples:500
        };
            let demo = "";
            for (let [fruit, value] of Object.entries(fruits)) {
            demo += fruit + ": " + value + "<br>";
            }

       // Using JSON.stringify() *********************

        const person = {
        name: "John",
        age: 30,
        city: "New York"
        };

        // Stringify Object
        let myString = JSON.stringify(person);

        // Display String
        document.getElementById("demo").innerHTML = myString;
       </script>
       
       <h2>JavaScript Object Constructors</h2>
       <script>
        // Sometimes we need to create many objects of the same type.
        // To create an object type we use an object constructor function.
        // It is considered good practice to name constructor functions with an upper-case first letter.

        function Person(first, last, age, eye) {
        this.firstName = first;
        this.lastName = last;
        this.age = age;
        this.eyeColor = eye;
        }
        // Now we can use new Person() to create many new Person objects:

        const myFather = new Person("John", "Doe", 50, "blue");
        const myMother = new Person("Sally", "Rally", 48, "green");
        const mySister = new Person("Anna", "Rally", 18, "green");
        const mySelf = new Person("Johnny", "Rally", 22, "green");

        // Adding a Property to a Constructor
        Person.prototype.nationality = "English";

        // Constructor Function Methods

        function Person(first, last, age, eyecolor) {
        this.firstName = first;
        this.lastName = last;
        this.age = age;
        this.eyeColor = eyecolor;
        this.fullName = function() {
            return this.firstName + " " + this.lastName;
        };
        }

        // Adding a Method to a Constructor

        // Adding a new method must be done to the constructor function prototype:
        Person.prototype.changeName = function (name) {
        this.lastName = name;
        }
        myMother.changeName("Doe");

        // Built-in JavaScript Constructors
        // JavaScript has built-in constructors for all native objects:

        new Object()   // A new Object object
        new Array()    // A new Array object
        new Map()      // A new Map object
        new Set()      // A new Set object
        new Date()     // A new Date object
        new RegExp()   // A new RegExp object
        new Function() // A new Function object
        
   </script>
   <h2>JavaScript Accessors (Getters and Setters)</h2>
   <script>
    // This example uses a lang property to get the value of the language property.
    // JavaScript Getter (The get Keyword)
     const person = {
        firstName: "John",
        lastName: "Doe",
        language: "en",
        get lang() {
            return this.language;
        }
        };

        document.getElementById("demo").innerHTML = person.lang;

        // JavaScript Setter (The set Keyword)

        const person = {
        firstName: "John",
        lastName: "Doe",
        language: "",
        set lang(lang) {
            this.language = lang;
        }
        };

        // Set an object property using a setter:
        person.lang = "en";
        document.getElementById("demo").innerHTML = person.language;

        // Why Using Getters and Setters?
        //     It gives simpler syntax
        //     It allows equal syntax for properties and methods
        //     It can secure better data quality
        //     It is useful for doing things behind-the-scenes
   </script>

   <h2>JavaScript Object Protection</h2>
        <script>
            // Object Protection Methods
            // Prevents re-assignment
        const car = {
            type:"Fiat",
            model:"500",
            color:"white"
            };

        // Prevents adding object properties
        Object.preventExtensions(object)

        // Returns true if properties can be added to an object
        Object.isExtensible(object)

        // Prevents adding and deleting object properties
        Object.seal(object)

        // Returns true if object is sealed
        Object.isSealed(object)

        // Prevents any changes to an object
        Object.freeze(object)

        // Returns true if object is frozen
        Object.isFrozen(object)

        // Using const
        // The most common way to protect an object from being changed is by using the const keyword.
        // With const you can not re-assign the object, but you can still change the value of a property, delete a property or create a new property.
 

